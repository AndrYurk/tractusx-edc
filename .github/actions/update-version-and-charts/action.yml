#################################################################################
#  Copyright (c) 2025 Cofinity-X GmBh
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################

name: "Setup TractusX EDC in memory runtime"
description: "Setup TractusX EDC in memory runtime"
inputs:
  version:
    description: 'The release version'
    required: true
  release_branch:
    description: 'Identifier fo the release branch'
    required: true
runs:
  using: "composite"
  steps:
    - name: Bump version in /charts
      uses: mikefarah/yq@v4.45.2
      with:
        cmd: |
          find charts -name Chart.yaml -maxdepth 3 | xargs -n1 yq -i '.appVersion = "${{ inputs.version }}" | .version = "${{ inputs.version }}"'
    - name: Update Chart READMEs
      uses: addnab/docker-run-action@v3
      with:
        image: jnorwood/helm-docs:v1.10.0
        options: -v ${{ github.workspace }}/charts:/helm-docs
        run: |
          helm-docs --log-level debug
    - name: Bump version in gradle.properties for release
      if: ${{ inputs.release_branch == 'true' }}
      shell: bash
      run: |-
        # replace the project's (default) version, could be overwritten later with the -Pversion=... flag
        sed -i  's/version=.*/version=${{ inputs.version }}/g' gradle.properties

    - name: Bump version in gradle.properties for main
      if: ${{ inputs.release_branch == 'false' }}
      shell: bash
      run: |-
        IFS=.- read -r RELEASE_VERSION_MAJOR RELEASE_VERSION_MINOR RELEASE_VERSION_PATCH SNAPSHOT<<<"${{ inputs.version }}"
          INC=0
          # Compute new snapshot version, do not increment snapshot on non-final releases, e.g. -rc1
          if [ -z $SNAPSHOT ]; then
            # snapshot
            echo "$VERSION is a final release version, increase patch for next snapshot"
            INC=1
          else
            echo "$VERSION is not a final release version (contains \"$SNAPSHOT\"), will not increase patch"
          fi
        
          VERSION="$RELEASE_VERSION_MAJOR.$((RELEASE_VERSION_MINOR+$INC)).0-SNAPSHOT"
          SNAPSHOT_VERSION=$VERSION
        
          # Persist the "version" in the gradle.properties
          sed -i "s/version=.*/version=$SNAPSHOT_VERSION/g" gradle.properties