#################################################################################
#  Copyright (c) 2025 Cofinity-X
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "allure-release"

on:
  release:
    types: [published]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
      -   name: Checkout repository
          uses: actions/checkout@v4

      -   name: Set up JDK 23
          uses: actions/setup-java@v4
          with:
            distribution: temurin
            java-version: '23'

      -   name: Cache Gradle dependencies
          uses: actions/cache@v4
          with:
            path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}

      -   name: Build project without tests
          run: ./gradlew test -DincludeTags="EndToEndTest"

      -   name: Aggregate Allure test results
          run: ./gradlew aggregateAllureResults

      -   name: Checkout gh-pages branch
          uses: actions/checkout@v4
          if: always()
          with:
            ref: gh-pages
            path: gh-pages

      -   name: Build Allure test report
          uses: simple-elf/allure-report-action@f841fec0e421b5d7d8e807dedfb03efb8cf30303
          if: always()
          with:
            gh_pages: gh-pages
            allure_results: build/aggregated-allure-results

      -   name: Get Release Name
          id: get_release
          uses: actions/github-script@v6
          with:
            script: |
              core.setOutput("release_name", context.payload.release.name);

      -   name: Move Allure report to target folder
          run: |
            TARGET_FOLDER="gh-pages/reports/${{ steps.get_release.outputs.release_name }}"
            if [ -d "$TARGET_FOLDER" ]; then
                echo "Existing report found in ${TARGET_FOLDER}. Removing it to replace with new report."
                rm -rf "$TARGET_FOLDER"
            fi
            mkdir -p "$TARGET_FOLDER"
            cp -R allure-report/* "$TARGET_FOLDER/"

      -   name: Publish Allure test report to gh-pages
          uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e
          if: always()
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_branch: gh-pages
            publish_dir: gh-pages

      -   name: Update Release Notes with Allure Report Link
          uses: actions/github-script@v6
          with:
            script: |
              const releaseId = context.payload.release.id;
              const repoParts = process.env.GITHUB_REPOSITORY.split('/');
              const repoName = repoParts[1];
              const owner = process.env.GITHUB_REPOSITORY_OWNER;
              const releaseName = encodeURIComponent(context.payload.release.name);
              const reportUrl = `https://${owner}.github.io/${repoName}/reports/${releaseName}/`;
              const { data: release } = await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId
              });
              const newBody = release.body + "\n\n**Test Report:** [View Report](" + reportUrl + ")";
              
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                body: newBody
              });