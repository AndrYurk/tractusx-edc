#################################################################################
#  Copyright (c) 2025 Cofinity-X GmbH
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Draft Release"
run-name: "Draft Release ${{ inputs.version }} from ${{ github.ref_name }}"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version you want to release. Ref should be either main for latest releases or a tag for bugfixes. '
        required: true
      sha:
        description: "Optional commit SHA to create the release from"
        required: false

jobs:
  validate-and-prepare:
    name: "Validate that tag does not already exist and prepare branch"
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/') }}
    outputs:
      branch_name: ${{ steps.resolve_branch.outputs.branch_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: check-tag
        name: "Check if tag exists"
        run: |-

          tag=$(git tag -l ${{ inputs.version }})

          if [ ! -z $tag ];
          then
            echo "Tag already exists! Please choose another tag."
            exit 1
          fi
      - id: resolve_branch
        name: "Resolve branch prefix (release or bugfix)"
        run: |
          
          if [[ ${{ github.ref_name }} == "main" ]];
          then
            echo "branch_name=release/${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          elif [[ ${{ github.ref }} == refs/tags/* ]]
          then
            echo "branch_name=bugfix/${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "Ref branch does not match required criteria. Should either be "main" or a tag."
            exit 1
          fi

  update-dependencies:
    name: "Update dependencies"
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    permissions:
      contents: write
      packages: write
      pages: write
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java
      - name: Check dependencies before release
        uses: ./.github/actions/generate-and-check-dependencies
        with:
          run: strict
      - name: Upload DEPENDENCIES file artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependencies
          path: DEPENDENCIES

  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, update-dependencies]
    permissions:
      contents: write
      packages: write
      pages: write
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.sha != '' && inputs.sha || github.ref_name }}
      - name: Create Release or Bugfix branch
        run: git checkout -b ${{ needs.validate-and-prepare.outputs.branch_name }}
      - name: Download DEPENDENCIES artifact
        uses: actions/download-artifact@v4
        with:
          name: dependencies
          path: .
      - name: Replace published DEPENDENCIES file link in NOTICE with the one just created
        run: sed -i "s#\[DEPENDENCIES\]\(.*\)#\[DEPENDENCIES\]\(DEPENDENCIES\)#g" NOTICE.md
      - name: Version and Chart Updates
        uses: ./.github/actions/update-version-and-charts
        with:
          version: ${{ inputs.version }}
          release_branch: "true"
      - name: Commit changes on release branch
        id: make-commit
        run: |
          git add .
          git config user.name "eclipse-tractusx-bot"
          git config user.email "tractusx-bot@eclipse.org"
          git commit --message "Prepare release ${{ inputs.version }}"

          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Push new branch
        run: git push origin ${{ needs.validate-and-prepare.outputs.branch_name }}

  main-branch-update:
    name: "Main Branch Update"
    runs-on: ubuntu-latest
    needs: [ validate-and-prepare, update-dependencies, draft-new-release ]
    if: ${{ github.ref_name == 'main' || github.sha == inputs.sha }}
    permissions:
      contents: write
      packages: write
      pages: write
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Download DEPENDENCIES artifact
        uses: actions/download-artifact@v4
        with:
          name: dependencies
          path: .
      - name: Replace published DEPENDENCIES link in NOTICE
        run: |
          sed -i "s#\[DEPENDENCIES\]\(.*\)#\[DEPENDENCIES\]\(DEPENDENCIES\)#g" NOTICE.md
      - name: Version and Chart Updates
        uses: ./.github/actions/update-version-and-charts
        with:
          version: ${{ inputs.version }}
          release_branch: "false"
      - name: Commit and push main updates
        run: |
          git add .
          git config user.name "eclipse-tractusx-bot"
          git config user.email "tractusx-bot@eclipse.org"
          git commit -m "Prepare release ${{ inputs.version }}"
          git push origin main