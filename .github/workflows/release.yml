#################################################################################
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Release"

on:
  pull_request:
    branches:
      - main
    types:
      - closed

  workflow_call:


jobs:
  # Gate
  validation:
    name: "Check if repository is not fork AND head is release OR base is bugfix"
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref_name, 'bugfix/') || startsWith(github.event.pull_request.head.ref, 'release/') }}
    outputs:
      RELEASE_VERSION: ${{ steps.release-version.outputs.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Output release version
        id: release-version
        run: |
          VERSION=$(grep "version" gradle.properties  | awk -F= '{print $2}')
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_OUTPUT

  # Release: GitHub tag & release; Starts a new development cycle if latest release;
  github-release:
    name: Publish new github release
    needs: [ validation ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.validation.outputs.RELEASE_VERSION
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/publish-tag-and-release
        with:
          version: ${{ needs.validation.outputs.RELEASE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          is_latest: ${{ github.ref_name == 'main' }}

  # Release: Update Release Notes with Allure Report Link
  publish-allure-report-link-to-release:
    name: "Update Release Notes with Allure Report Link"
    runs-on: ubuntu-latest
    needs: [ validation, github-release ]
    permissions:
      contents: write
    if: needs.validation.outputs.RELEASE_VERSION
    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = "${{ needs.validation.outputs.RELEASE_VERSION }}";
            
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: version
            });

            const reportUrl = `https://${owner}.github.io/${repo}/allure-reports/${version}/`;
            const newBody = `${release.body || ''}\n\n**Test Report:** [View Report](${reportUrl})`;

            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: release.id,
              body: newBody
            });
  # Release: Generate Allure report
#  allure-report:
#    name: "Generate Allure report"
#    permissions:
#      contents: write
#    if: needs.validation.outputs.RELEASE_VERSION
#    needs: [ verify ]
#    uses: ./.github/workflows/allure-report.yml
#    secrets: inherit
#    with:
#      version: ${{ needs.validation.outputs.RELEASE_VERSION }}

#  publish-report:
#    needs: [ validation, verify ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Download Allure Report ZIP
#        uses: actions/download-artifact@v4
#        with:
#          name: allure-report
#          path: allure-report-zip
#
#      - name: Unzip Allure Report
#        run: |
#          unzip allure-report-zip/allure-report.zip -d allure-report
#
#      - name: Deploy Allure Report to GitHub Pages
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_dir: allure-report
#
#      - name: Publish Allure test report to gh-pages
#        uses: peaceiris/actions-gh-pages@v4
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_dir: ./allure-reports/${{ needs.validation.outputs.RELEASE_VERSION }}
#          keep_files: true



