#################################################################################
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Release"

on:
  pull_request:
    branches:
      - main
    types:
      - closed

  workflow_call:


jobs:
  # Gate
  validation:
    name: "Check if repository is not fork AND head is release OR base is bugfix"
    runs-on: ubuntu-latest
    if: ${{ (startsWith(github.ref_name, 'bugfix/') || startsWith(github.event.pull_request.head.ref, 'release/')) }}
    outputs:
      RELEASE_VERSION: ${{ steps.release-version.outputs.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Output release version
        id: release-version
        run: |
          VERSION=$(grep "version" gradle.properties  | awk -F= '{print $2}')
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_OUTPUT

  github-release:
    name: Publish new github release
    needs: [ validation ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.validation.outputs.RELEASE_VERSION
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Git Config
        shell: bash
        run: |
          # Prepare git env
          git config user.name "eclipse-tractusx-bot"
          git config user.email "tractusx-bot@eclipse.org"
      - name: Create Release Tag
        id: create_release_tag
        shell: bash
        run: |
          # informative
          git branch -a
          git tag

          # Create & push tag
          git tag ${{ needs.validation.outputs.RELEASE_VERSION }}
          git push origin ${{ needs.validation.outputs.RELEASE_VERSION }}
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          tag: ${{ needs.validation.outputs.RELEASE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: ${{ github.ref_name == 'main' }}
          removeArtifacts: true

  bump-snapshot-version:
    needs: github-release
    if: github.ref_name == 'main'
    uses: ./.github/workflows/bump-version.yaml
    secrets: inherit

  # Release: Update Release Notes with Allure Report Link
  publish-allure-report-link-to-release:
    name: "Update Release Notes with Allure Report Link"
    runs-on: ubuntu-latest
    needs: [ validation, github-release ]
    permissions:
      contents: write
    if: needs.validation.outputs.RELEASE_VERSION
    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = "${{ needs.validation.outputs.RELEASE_VERSION }}";
            
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: version
            });

            const reportUrl = `https://${owner}.github.io/${repo}/allure-reports/${version}/`;
            const newBody = `${release.body || ''}\n\n**Test Report:** [View Report](${reportUrl})`;

            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: release.id,
              body: newBody
            });
